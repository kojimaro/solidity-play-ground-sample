{"version":3,"sources":["../external \"Module\"","components/presentational/Monaco.jsx","components/presentational/MonacoDiff.jsx","components/presentational/Submit.jsx","components/container/EditorButtons.jsx","code/SimpleStorageCode.js","code/Input.js","components/container/Editor.jsx","components/presentational/AvatorHeader.jsx","components/container/Input.jsx","components/presentational/TextForm.jsx","components/presentational/DeployerCard.jsx","components/presentational/ContractCard.jsx","utils/getJsonRpc.js","utils/decode.js","components/container/Output.jsx","utils/getSolc.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Module","Monaco","props","width","height","language","value","options","onChange","editorDidMount","react_default","a","createElement","lib_default","theme","MonacoDiff","original","modified","handleChange","lib","Submit","variant","color","label","onClick","fullWidth","dataId","Button_default","type","data-id","withStyles","container","display","flexWrap","margin","spacing","unit","classes","handleSubmit","showAnswer","className","Grid_default","item","xs","presentational_Submit","SimpleStorageCode","join","Input","Editor","state","editor","answer","monaco","focus","_this","setState","diffDidMount","e","handleDiffChange","event","preventDefault","getValue","isCorrect","compile","console","log","this","height100","editorWrapper","presentational_Monaco","selectOnLineNumbers","button","container_EditorButtons","diffWrapper","presentational_MonacoDiff","renderSideBySide","Component","position","bottom","AvatarHeader","src","subheader","title","CardHeader_default","avatar","Avatar_default","aria-label","Card_default","AvatorHeader","commentary","padding","TextForm","_ref","id","placeholder","TextField_default","card","marginBottom","rpcUrl","CardContent_default","Typography_default","gutterBottom","component","style","visibility","text","presentational_TextForm","getTextField","method","methodId","key","form","name","inputs","map","input","index","toString","overflow","backgroundColor","txInterface","result","noWrap","_getMethod","stateMutability","_encodeToABI","data","abi","signature","forEach","arg","web3","utils","toTwosComplement","replace","getJsonRpc","params","rpc","jsonrpc","push","JSON","stringify","abiCoder","AbiCoder","decodePrameters","outputs","hex","decodeParameters","Output","signerAddress","ontractAddress","target","match","deploy","_callee","contracts","provider","accounts","signer","factory","deployer","regenerator_default","wrap","_context","prev","next","abrupt","compiledCode","ethers","providers","JsonRpcProvider","listAccounts","sent","getSigner","ContractFactory","fromSolidity","SimpleStorage","deployed","generateTxInterface","_address","contractAddress","address","t0","alert","stop","_callee2","contract","_context2","methodName","args","length","i","evm","methodIdentifiers","concat","changeArgument","Number","parentElement","dataset","inputId","Object","toConsumableArray","iputs","runTransaction","_callee3","_this$state","response","_ref4","_context3","from","to","fetch","headers","Content-Type","body","json","presentational_DeployerCard","presentational_ContractCard","solc","wrapper","require","App","bool","code","output","sources","test.sol","content","settings","outputSelection","*","parse","root","Paper_default","boxCommon","container_Input","container_Editor","container_Output","flexGrow","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f347fbe.chunk.js","sourcesContent":["module.exports = Module;","import React from \"react\";\nimport MonacoEditor from 'react-monaco-editor';\n\nconst Monaco = props => {\n    const {\n        width,\n        height,\n        language,\n        value,\n        options,\n        onChange,\n        editorDidMount\n    } = props;\n\n    return (\n        <MonacoEditor\n            width={width}\n            height={height}\n            language={language}\n            value={value}\n            options={options}\n            onChange={onChange}\n            editorDidMount={editorDidMount}\n            theme=\"vs-dark\"\n        />\n    )\n}\n\nexport default Monaco;","import React from \"react\";\nimport { MonacoDiffEditor } from 'react-monaco-editor';\n\nconst MonacoDiff = props => {\n    const {\n        width,\n        height,\n        language,\n        original,\n        modified,\n        options,\n        handleChange,\n        editorDidMount\n    } = props;\n\n    return (\n        <MonacoDiffEditor\n            width={width}\n            height={height}\n            language={language}\n            original={original}\n            value={modified}\n            options={options}\n            onChange={handleChange}\n            editorDidMount={editorDidMount}\n        />\n    )\n}\n\nexport default MonacoDiff;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from '@material-ui/core/Button';\n\nconst Submit = props => {\n    const {\n        variant,\n        color,\n        label,\n        onClick,\n        fullWidth,\n        dataId\n    } = props;\n\n    return(\n        <Button\n            type=\"submit\"\n            variant={variant}\n            color={color}\n            onClick={onClick}\n            fullWidth={fullWidth}\n            data-id={dataId}\n        >\n        {label}\n        </Button>\n    );\n}\n\nSubmit.propTypes = {\n    variant: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n    fullWidth: PropTypes.bool.isRequired\n}\n\nexport default Submit;","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Submit from \"../presentational/Submit\";\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        margin: theme.spacing.unit\n    }\n})\n\nconst EditorButtons = props => {\n    const { classes, handleSubmit, showAnswer } = props;\n\n    return(\n        <div className={classes.container}>\n            <Grid container spacing={8}>\n                <Grid item xs={6}>\n                    <Submit\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        label=\"回答を見る\"\n                        onClick={showAnswer}\n                        fullWidth={true}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <Submit\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        label=\"答え合せ\"\n                        onClick={handleSubmit}\n                        fullWidth={true}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(EditorButtons)","const SimpleStorageCode =[ \n    'pragma solidity ^0.5.0;',\n    '',\n    'contract SimpleStorage {',\n    '',\n    '   uint storedData;',\n    '   uint storedData02;',\n    '',\n    '   function set(uint x, uint y) public {',\n    '      storedData = x;',\n    '      storedData02 = y;',\n    '   }',\n    '',\n    '   function get() public view returns (uint, uint) {',\n    '      return (storedData, storedData02);',\n    '   }',\n    '}'\n].join('\\n');\n\nexport default SimpleStorageCode;","const Input =[ \n    'pragma solidity ^0.5.0;',\n    '',\n    'contract SimpleStorage {',\n    '',\n    '   uint storedData;',\n    '   uint storedData02;',\n    '',\n    '   function set(uint x, uint y) public {',\n    '      storedData = x;',\n    '      storedData02 = y;',\n    '   }',\n    '}'\n].join('\\n');\n\nexport default Input;","import React, { Component } from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Monaco from '../presentational/Monaco';\nimport MonacoDiff from '../presentational/MonacoDiff';\nimport EditorButtons from './EditorButtons';\nimport SimpleStorageCode from '../../code/SimpleStorageCode';\nimport Input from '../../code/Input';\n\nconst styles = theme => ({\n    editorWrapper: {\n        height: '60%',\n        position: 'relative'\n    },\n    diffWrapper: {\n        height: '40%',\n    },\n    button: {\n        width: '100%',\n        position: 'absolute',\n        bottom: 0\n    },\n    height100 : {\n        height: '100%'\n    }\n})\n\nclass Editor extends Component {\n    state = {\n        editor: null,\n        answer: Input\n    }\n    \n    editorDidMount = (editor, monaco) => {\n        //console.log('editorDidMount', editor);\n        editor.focus();\n        this.setState({editor, answer: Input})\n    }\n\n    diffDidMount = (editor, monaco) => {\n        //console.log('diffDidMount', editor);\n        editor.focus();\n    }\n    \n    handleChange = (value, e) => {\n        //console.log('onchange:', value, e)\n    }\n\n    handleDiffChange = (value, e) => {\n        //console.log('DiffChange:', value, e)\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n\n        this.setState({answer: this.state.editor.getValue()})\n\n        if(this.state.editor.getValue() !== SimpleStorageCode) {\n            this.props.isCorrect(false)\n            return;\n        }\n\n        this.props.isCorrect(true)\n        this.props.compile(this.state.editor.getValue())\n    }\n\n    showAnswer = () => {\n        console.log(\"show\");\n    }\n\n    render() {\n        const { classes } = this.props\n\n        const options = { selectOnLineNumbers: false}\n        const diffOptions = { renderSideBySide: false}\n\n        return(\n            <Grid container className={classes.height100}>\n                <Grid item xs={12} className={classes.editorWrapper}>\n                    <Monaco\n                        width=\"100%\"\n                        height=\"100%\"\n                        language=\"solidity\"\n                        value={this.state.answer}\n                        options={options}\n                        onChange={this.handleChange}\n                        editorDidMount={this.editorDidMount}\n                    />\n                    <div className={classes.button}>\n                        <EditorButtons handleSubmit={this.handleSubmit} showAnswer={this.showAnswer}/>\n                    </div>\n                </Grid>\n                <Grid item xs={12} className={classes.diffWrapper}>\n                    <MonacoDiff\n                        width=\"100%\"\n                        height=\"100%\"\n                        language=\"javascript\"\n                        original={this.state.answer}\n                        modified={SimpleStorageCode}\n                        options={diffOptions}\n                        onChange={this.handleDiffChange}\n                        editorDidMount={this.diffDidMount}\n                    />\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default withStyles(styles)(Editor);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst AvatarHeader = props => {\n    const {\n        label,\n        src,\n        subheader,\n        title\n    } = props;\n\n    return(\n        <CardHeader\n            avatar={<Avatar aria-label={label} src={src}/>}\n            subheader={subheader}\n            title={title}\n        />\n    );\n}\n\nAvatarHeader.propTypes = {\n    label: PropTypes.string.isRequired,\n    src: PropTypes.string.isRequired,\n    subheader: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n}\n\nexport default AvatarHeader;","import React, { Component } from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport AvatorHeader from '../presentational/AvatorHeader';\n\nconst styles = theme => ({\n    commentary: {\n        padding: '1%',\n    }\n})\n\nclass Input extends Component {\n    render(){\n        const { classes } = this.props;\n\n        return(\n            <Grid container>\n                <Grid item xs={12}>\n                    <Card>\n                        <AvatorHeader\n                            label=\"Recipe\"\n                            src=\"https://pbs.twimg.com/profile_images/1030659217315704833/hZKnb7hm_400x400.jpg\"\n                            subheader=\"コースの作成者\"\n                            title=\"こじりょー\"/>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} className={classes.commentary}>\n                    <h2>読み込みと書き込み</h2>\n                    <p>関数内で宣言された値はmemoryへ保存されます。</p>\n                    <p>一方で関数外で宣言された値はstorageへ保存されます。</p>\n                    <p>このstorageへ保存された値はブロックチェーンに記録されます。</p>\n                    <p>試しになんらかの数値をブロックチェーンに記録する処理を書いていきましょう！</p>\n                </Grid>\n            </Grid>\n        );\n    };\n}\n\nexport default withStyles(styles)(Input);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from '@material-ui/core/TextField';\n\nconst TextForm = ({label, type, id, value, onChange, variant, margin, placeholder, dataId}) => {\n    return(\n        <TextField\n            type={type}\n            label={label}\n            id={id}\n            value={value}\n            onChange={onChange}\n            variant={variant}\n            margin={margin}\n            placeholder={placeholder}\n            fullWidth={true}\n            data-id={dataId}\n        />\n    );\n}\n\nTextForm.propTypes = {\n    label: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    variant: PropTypes.string.isRequired,\n    margin: PropTypes.string.isRequired\n}\n\nexport default TextForm;","import React from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextForm from './TextForm';\nimport Submit from './Submit';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    card: {\n        marginBottom: theme.spacing.unit,\n    }\n})\n\nconst DeployerCard = props => {\n    const {\n        classes,\n        handleChange,\n        handleSubmit,\n        isCorrect,\n        rpcUrl\n    } = props;\n\n    return(\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    デプロイ\n                </Typography>\n                <div style={{visibility:isCorrect === null ? 'hidden':'visible'}}>\n                    <Typography component='p' className={classes.text} style={{display:isCorrect ? 'none':'block'}}>\n                        残念、不正解です！\n                    </Typography>\n\n                    <div style={{visibility:isCorrect ? 'visible':'hidden'}}>\n                        <TextForm\n                            type='text'\n                            label='Web3 Provider Endpoint'\n                            id='web3-provider-endpoint'\n                            value={rpcUrl}\n                            onChange={handleChange}\n                            variant='outlined'\n                            margin='normal'\n                        />\n                        <Submit\n                            variant=\"contained\"\n                            color=\"primary\"\n                            label=\"デプロイ\"\n                            onClick={handleSubmit}\n                            fullWidth={true}\n                        />\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default withStyles(styles)(DeployerCard);","import React from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport TextForm from './TextForm';\nimport Submit from './Submit';\n\nconst styles = theme =>({\n    form: {\n        marginBottom: theme.spacing.unit\n    },\n    console: {\n        height: '100px',\n        overflow: 'auto',\n        backgroundColor: '#1e1e1e',\n        marginBottom: theme.spacing.unit,\n        padding: theme.spacing.unit\n    }\n})\n\nconst ContractCard = props => {\n    const { classes, txInterface, result } = props;\n\n    return(\n        <Card>\n            <CardHeader\n                title=\"コントラクト\"/>\n            <CardContent>\n                <div className={classes.console}>\n                    {result.map((log, index)=>{\n                        return(\n                            <Typography component='p' noWrap={true} key={index} color=\"secondary\">\n                                {log}\n                            </Typography>\n                        )\n                    })}\n                </div>\n                {txInterface.map((method, index)=>getTextField(method, index, props))}\n            </CardContent>\n        </Card>\n    );\n}\n\nconst getTextField = (method, methodId, props) => {\n    const { classes, handleSubmit, handleChange } = props\n\n    return(\n        <div key={methodId} className={classes.form}>\n            <Submit\n                variant=\"contained\"\n                color=\"default\"\n                label={method.name}\n                onClick={handleSubmit}\n                fullWidth={true}\n                dataId={methodId}\n            />\n            {method.inputs.map((input, index)=>{\n                return(\n                    <div key={index}>\n                        <TextForm\n                            type='text'\n                            label={input.name}\n                            id={index.toString()}\n                            value={input.value}\n                            onChange={handleChange}\n                            variant='outlined'\n                            margin='dense'\n                            dataId={methodId}\n                            placeholder={input.type}\n                        />\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default withStyles(styles)(ContractCard);","import web3 from \"web3\";\n\nconst getJsonRpc = params => {\n    const { data } = params\n\n    let rpc = {\n        jsonrpc: '2.0',\n        id: 1,\n        method: '',\n        params:[]\n    }\n\n    let method = _getMethod(data.stateMutability)\n    params.data = _encodeToABI(data)\n\n    rpc.method = method\n    rpc.params.push(params)\n    rpc = JSON.stringify(rpc)\n    return rpc\n}\n\nconst _getMethod = stateMutability => stateMutability === 'view' ? 'eth_call' : 'eth_sendTransaction'\n\nconst _encodeToABI = data => {\n    var abi = '0x' + data.signature\n\n    data.inputs.forEach(input => {\n        var arg = web3.utils.toTwosComplement(input.value)\n        arg = arg.replace(/^0x/, '')\n        abi = abi + arg\n    })\n\n    return abi\n}\n\nexport default getJsonRpc","import { AbiCoder } from \"web3-eth-abi\";\n\nconst abiCoder = new AbiCoder()\n\nconst decodePrameters = (outputs, hex) => abiCoder.decodeParameters(outputs, hex)\n\nexport default decodePrameters","import React, { Component } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport DeployerCard from '../presentational/DeployerCard';\nimport ContractCard from '../presentational/ContractCard';\nimport { ethers } from 'ethers';\nimport getJsonRpc from '../../utils/getJsonRpc';\nimport decodePrameters from '../../utils/decode';\n\nclass Output extends Component {\n    state = {\n        rpcUrl: 'http://127.0.0.1:7545',\n        signerAddress: '',\n        ontractAddress: '',\n        txInterface: [],\n        result: [],\n    }\n\n    handleChange = event => {\n        if(event.target.value.match(/[\\s\\t]/)) return;\n        this.setState({rpcUrl: event.target.value})\n    }\n\n    deploy = async() => {\n        if(this.props.isCorrect !== true) return;\n\n        const { contracts } = this.props.compiledCode;\n\n        try {\n            let provider = new ethers.providers.JsonRpcProvider(this.state.rpcUrl)\n            let accounts = await provider.listAccounts()\n            let signer = provider.getSigner(accounts[0])\n            let factory =  ethers.ContractFactory.fromSolidity(\n                contracts['test.sol'].SimpleStorage,\n                signer\n            );\n\n            const deployer = await factory.deploy()\n            await deployer.deployed()\n\n            await this.generateTxInterface(contracts['test.sol'].SimpleStorage)\n\n            this.setState({\n                signerAddress: signer._address, \n                contractAddress: deployer.address\n            })\n        } catch (error) {\n            alert(`Failed.`);\n        }\n    }\n\n    generateTxInterface = async(contract) => {\n        let txInterface = []\n        await contract.abi.map((method, index) => {\n            var methodName;\n            let args = []\n\n            if (method.inputs.length > 0) {\n                methodName = method.name + '('\n\n                for(var i=0; i < method.inputs.length; i++) {\n                    let type = method.inputs[i].type\n                    methodName = methodName + type + ','\n\n                    args.push({\n                        name:method.inputs[i].name, \n                        type:method.inputs[i].type, \n                        value:''\n                    })\n                }\n\n                methodName = methodName.replace(/,$/, ')')\n            } else {\n                methodName = method.name + '()'\n            }\n\n            txInterface.push({\n                name:methodName, \n                inputs:args,\n                outputs: method.outputs,\n                signature: contract.evm.methodIdentifiers[methodName],\n                stateMutability: method.stateMutability\n            })\n            return txInterface\n        })\n\n        this.setState({\n            txInterface: this.state.txInterface.concat(txInterface)\n        })\n    }\n\n    changeArgument = event => {\n        if(event.target.value.match(/[\\s\\t]/)) return;\n\n        let methodId = Number(event.target.parentElement.parentElement.dataset.id)\n        let inputId = Number(event.target.id)\n\n        let txInterface = this.state.txInterface.concat()\n        let inputs = [...txInterface[methodId].inputs]\n        inputs[inputId].value = event.target.value\n\n        txInterface[methodId].iputs = inputs\n        this.setState({txInterface})\n    }\n\n    runTransaction = async(event) => {\n        const { rpcUrl, txInterface } = this.state\n\n        let methodId = Number(event.target.parentElement.dataset.id)\n\n        let params = {\n            from: this.state.signerAddress,\n            to: this.state.contractAddress,\n            data: txInterface[methodId], \n            value: ''\n        }\n\n        const rpc = getJsonRpc(params)\n\n        let response = await fetch(rpcUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            },\n            body: rpc\n        });\n\n        var { result } = await response.json()\n\n        if(txInterface[methodId].outputs.length > 0) {\n            result = JSON.stringify(decodePrameters(txInterface[methodId].outputs, result))\n        }\n\n        this.setState({result: this.state.result.concat([result])})\n    }\n\n    render(){\n        const { isCorrect } = this.props\n\n        return(\n            <Grid container>\n                <Grid item xs={12}>\n                    <DeployerCard \n                        handleChange={this.handleChange}\n                        handleSubmit={this.deploy}\n                        isCorrect={isCorrect}\n                        rpcUrl={this.state.rpcUrl}/>\n                </Grid>\n                <Grid item xs={12}>\n                    <ContractCard \n                        handleChange={this.changeArgument}\n                        handleSubmit={this.runTransaction}\n                        txInterface={this.state.txInterface}\n                        result={this.state.result}/>\n                </Grid>\n            </Grid>\n        );\n    };\n}\n\nexport default Output;","import * as wrapper from 'solc/wrapper'\nconst solc = wrapper(require('module'))\n\nexport default solc;","import React, { Component } from \"react\";\nimport IssueContract from \"./contracts/Issue.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Editor from \"./components/container/Editor\";\nimport Input from './components/container/Input';\nimport Output from './components/container/Output';\nimport solc from './utils/getSolc';\n\nimport \"./App.css\";\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing.unit,\n        height: '100%'\n    },\n    boxCommon: {\n        height: '100%'\n    },\n    height100: {\n        height: '100%'\n    }\n})\n\nclass App extends Component {\n    state = { \n        web3: null, \n        accounts: null, \n        contract: null,\n        isCorrect: null,\n        compiledCode: null,\n    };\n\n  /*componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = IssueContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        IssueContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };*/\n\n    isCorrect = bool => {\n        this.setState({isCorrect: bool})\n    }\n\n    compile = async(code) => {\n        let input = {\n            language: 'Solidity',\n            sources: {\n                'test.sol': {\n                    content: code\n                }\n            },\n            settings: {\n                outputSelection: {\n                    '*': {\n                        '*': [ '*' ]\n                    }\n                }\n            }\n        }\n        \n        let output = JSON.parse(solc.compile(JSON.stringify(input)))\n        this.setState({compiledCode: output})\n        console.log(output);\n    }\n\n    /*saveAchievement = async() => {\n        const { accounts, contract } = this.state;\n        const timestamp = new Date().getTime() / 1000;\n\n        const response = await contract.methods.write(\n            0x9E8b0dB8780Bb92a5Ea71bD153d505B8b10Fe2Fd,\n            'YamadaTarou',\n            'ブロックチェーンへの記録処理',\n            'Ethereumブロックチェーンへの書き込み処理を実装しました！',\n            timestamp.toString()\n        ).send({from:accounts[0]});\n\n        console.log(response.events.Transfer.returnValues)\n    };*/\n\n  render() {\n    /*if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }*/\n    const { classes } = this.props;\n\n    return (\n        <div className={classes.root}>\n            <Grid container className={classes.height100} spacing={16}>\n                <Grid item xs={4}>\n                    <Paper className={classes.boxCommon}>\n                        <Input/>\n                    </Paper>\n                </Grid>\n                <Grid item xs={5}>\n                    <Paper className={classes.boxCommon}>\n                        <Editor \n                            isCorrect={this.isCorrect}\n                            compile={this.compile}/>\n                    </Paper>\n                </Grid>\n                <Grid item xs={3}>\n                    <div className={classes.boxCommon}>\n                        <Output \n                            isCorrect={this.state.isCorrect}\n                            compiledCode={this.state.compiledCode}\n                        />\n                    </div>\n                </Grid>\n            </Grid>\n        </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}